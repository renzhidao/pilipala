name: Build APK (arm64-v8a only, preflight auto-setup)

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: stable

      - name: Preflight | Auto-detect compileSdk & buildTools and install SDK components
        shell: bash
        run: |
          set -e
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          echo "ANDROID_HOME=${ANDROID_HOME}"

          # Parse from app/build.gradle
          COMPILE_SDK="$(grep -E '^\s*compileSdk(VERSION)?\s*[= ]\s*[0-9]+' -m1 android/app/build.gradle | grep -Eo '[0-9]+' | head -1 || true)"
          BUILD_TOOLS="$(grep -E '^\s*buildToolsVersion\s*"' -m1 android/app/build.gradle | sed -E 's/.*"([^"]+)".*/\1/' || true)"
          if [ -z "$COMPILE_SDK" ]; then COMPILE_SDK=34; fi
          if [ -z "$BUILD_TOOLS" ]; then BUILD_TOOLS=34.0.0; fi
          echo "Detected compileSdkVersion=$COMPILE_SDK"
          echo "Detected buildToolsVersion=$BUILD_TOOLS"

          # Ensure sdkmanager exists
          if [ -x "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" ]; then
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          elif [ -x "${ANDROID_SDK_ROOT}/cmdline-tools/bin/sdkmanager" ]; then
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/bin/sdkmanager"
          else
            echo "::group::Install cmdline-tools;latest"
            mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
            curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -o /tmp/cmdtools.zip
            unzip -q /tmp/cmdtools.zip -d /tmp/cmdtools
            mv /tmp/cmdtools/cmdline-tools "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
            echo "::endgroup::"
          fi

          yes | "${SDKMANAGER}" --sdk_root="${ANDROID_SDK_ROOT}" --licenses || true
          yes | "${SDKMANAGER}" --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-${COMPILE_SDK}" "build-tools;${BUILD_TOOLS}" || true

          echo "::group::Installed platforms & build-tools"
          ls -la "${ANDROID_SDK_ROOT}/platforms" || true
          ls -la "${ANDROID_SDK_ROOT}/build-tools" || true
          echo "::endgroup::"

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate keystore (if missing)
        run: |
          if [ ! -f android/app/vvex.jks ]; then
            keytool -genkey -v -keystore android/app/vvex.jks \
              -keyalg RSA -keysize 2048 -validity 10000 \
              -storepass temp123456 -keypass temp123456 \
              -alias tempkey \
              -dname "CN=Temp, OU=Temp, O=Temp, L=Temp, S=Temp, C=US"
          else
            echo "Keystore exists, skip."
          fi

      - name: Build APK (arm64-v8a only)
        run: flutter build apk --release --target-platform android-arm64
        env:
          KEYSTORE_PASSWORD: temp123456
          KEY_ALIAS: tempkey
          KEY_PASSWORD: temp123456

      - name: Get version
        id: version
        run: |
          VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          mkdir -p output
          cp build/app/outputs/flutter-apk/app-arm64-v8a-release.apk \
             output/pilipala-v${{ steps.version.outputs.version }}-arm64-v8a.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: pilipala-arm64-v8a
          path: output/*.apk
          if-no-files-found: error